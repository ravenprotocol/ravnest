# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2
import tensor_pb2 as tensor__pb2


class CommServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_buffer = channel.stream_unary(
                '/CommServer/send_buffer',
                request_serializer=tensor__pb2.SendTensor.SerializeToString,
                response_deserializer=tensor__pb2.SendTensorReply.FromString,
                )
        self.buffer_status = channel.unary_unary(
                '/CommServer/buffer_status',
                request_serializer=server__pb2.CheckBufferStatus.SerializeToString,
                response_deserializer=server__pb2.BufferStatusReply.FromString,
                )
        self.reduce_chunk = channel.stream_unary(
                '/CommServer/reduce_chunk',
                request_serializer=server__pb2.ReduceChunk.SerializeToString,
                response_deserializer=server__pb2.ReceivedChunk.FromString,
                )
        self.gather_chunk = channel.stream_unary(
                '/CommServer/gather_chunk',
                request_serializer=server__pb2.GatherChunk.SerializeToString,
                response_deserializer=server__pb2.ReceivedChunk.FromString,
                )


class CommServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_buffer(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buffer_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reduce_chunk(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def gather_chunk(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_buffer': grpc.stream_unary_rpc_method_handler(
                    servicer.send_buffer,
                    request_deserializer=tensor__pb2.SendTensor.FromString,
                    response_serializer=tensor__pb2.SendTensorReply.SerializeToString,
            ),
            'buffer_status': grpc.unary_unary_rpc_method_handler(
                    servicer.buffer_status,
                    request_deserializer=server__pb2.CheckBufferStatus.FromString,
                    response_serializer=server__pb2.BufferStatusReply.SerializeToString,
            ),
            'reduce_chunk': grpc.stream_unary_rpc_method_handler(
                    servicer.reduce_chunk,
                    request_deserializer=server__pb2.ReduceChunk.FromString,
                    response_serializer=server__pb2.ReceivedChunk.SerializeToString,
            ),
            'gather_chunk': grpc.stream_unary_rpc_method_handler(
                    servicer.gather_chunk,
                    request_deserializer=server__pb2.GatherChunk.FromString,
                    response_serializer=server__pb2.ReceivedChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_buffer(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/CommServer/send_buffer',
            tensor__pb2.SendTensor.SerializeToString,
            tensor__pb2.SendTensorReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buffer_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommServer/buffer_status',
            server__pb2.CheckBufferStatus.SerializeToString,
            server__pb2.BufferStatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reduce_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/CommServer/reduce_chunk',
            server__pb2.ReduceChunk.SerializeToString,
            server__pb2.ReceivedChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def gather_chunk(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/CommServer/gather_chunk',
            server__pb2.GatherChunk.SerializeToString,
            server__pb2.ReceivedChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
